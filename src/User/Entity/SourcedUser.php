<?php

namespace MessageApp\User\Entity;

use Broadway\EventSourcing\EventSourcedAggregateRoot;
use MessageApp\Event\ThirdPartyAccountLinkedEvent;
use MessageApp\Event\ThirdPartyAccountReplacedEvent;
use MessageApp\Event\UserCreatedEvent;
use MessageApp\User\ApplicationUserId;
use MessageApp\User\ThirdParty\Account as ThirdPartyAccount;
use MessageApp\User\ThirdParty\Source;

class SourcedUser extends EventSourcedAggregateRoot
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////   PROPERTIES   ///////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /**
     * @var ApplicationUserId
     */
    private $id;

    /**
     * @var string
     */
    private $name;

    /**
     * @var string
     */
    private $preferredLanguage;

    /**
     * @var ThirdPartyAccount[]
     */
    private $thirdPartyAccounts;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////   PRIVATE CONSTRUCTOR   //////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /**
     * Constructor
     */
    private function __construct()
    {
        $this->thirdPartyAccounts = [];
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////   DOMAIN METHODS   ////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /**
     * @param ThirdPartyAccount $thirdPartyUser
     */
    public function linkToThirdPartyAccount(ThirdPartyAccount $thirdPartyUser)
    {
        if ($this->isThirdPartyAccountAlreadyLinked($thirdPartyUser->getSource())) {
            $this->apply(new ThirdPartyAccountReplacedEvent($this->id, $thirdPartyUser));
        }

        $this->apply(new ThirdPartyAccountLinkedEvent($this->id, $thirdPartyUser));
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////   ACCESSORS   ///////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /**
     * Returns the user id
     *
     * @return ApplicationUserId
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @return string
     */
    public function getAggregateRootId()
    {
        return $this->id;
    }

    /**
     * Returns the user name
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Returns the preferred language
     *
     * @return string
     */
    public function getPreferredLanguage()
    {
        return $this->preferredLanguage;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////   PRIVATE METHODS   /////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /**
     * Initialize the game
     *
     * @param ApplicationUserId $id
     * @param string            $name
     * @param string            $language
     */
    private function initialize(ApplicationUserId $id, $name, $language)
    {
        $this->apply(new UserCreatedEvent($id, $name, $language));
    }

    /**
     * @param Source $source
     *
     * @return bool
     */
    private function isThirdPartyAccountAlreadyLinked(Source $source)
    {
        return array_key_exists((string) $source, $this->thirdPartyAccounts);
    }

    /**
     * @param ThirdPartyAccount $account
     */
    private function setThirdPartyUser(ThirdPartyAccount $account)
    {
        $this->thirdPartyAccounts[(string) $account->getSource()] = $account;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////   APPLY EVENTS   //////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /**
     * Apply the user created event
     *
     * @param \MessageApp\Event\UserCreatedEvent $event
     */
    protected function applyUserCreatedEvent(UserCreatedEvent $event)
    {
        $this->id = $event->getUserId();
        $this->name = $event->getUsername();
        $this->preferredLanguage = $event->getPreferredLanguage();
        $this->thirdPartyAccounts = [];
    }

    /**
     * Apply the third party account linked event
     *
     * @param ThirdPartyAccountLinkedEvent $event
     */
    protected function applyThirdPartyAccountLinkedEvent(ThirdPartyAccountLinkedEvent $event)
    {
        $this->setThirdPartyUser($event->getThirdPartyAccount());
    }

    /**
     * Apply the third party account replaced event
     *
     * @param ThirdPartyAccountReplacedEvent $event
     */
    protected function applyThirdPartyAccountReplacedEvent(ThirdPartyAccountReplacedEvent $event)
    {
        $this->setThirdPartyUser($event->getThirdPartyAccount());
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////   STATIC CONSTRUCTOR   ///////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /**
     * Create a new instance
     *
     * @param  ApplicationUserId $id
     * @param  string            $name
     * @param  string            $language
     *
     * @return SourcedUser
     */
    public static function createUser(ApplicationUserId $id, $name, $language)
    {
        $user = new self();
        $user->initialize(
            $id,
            $name,
            $language
        );

        return $user;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////   RECONSTITUTION   /////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /**
     * Static construction method for reconstitution
     *
     * @return SourcedUser
     */
    public static function instantiateForReconstitution()
    {
        return new self();
    }
}
